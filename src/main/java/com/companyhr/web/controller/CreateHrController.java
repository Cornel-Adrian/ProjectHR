package com.companyhr.web.controller;

import com.companyhr.controller.EmployeeCredentialsApiController;
import com.companyhr.model.Employee;
import com.companyhr.model.EmployeeCredentials;
import com.companyhr.repository.EmployeeCredentialsRepository;
import com.companyhr.repository.EmployeeRepository;
import com.companyhr.service.EmployeeService;
import com.companyhr.service.SecurityService;
import com.companyhr.validator.UserValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Calendar;
import java.util.Random;

/**
 * Contains methods used to create a HR user by an ADMIN ROLE user
 * ADMIN ROLE users can create an account for the HR but they cannot edit the Hr user details
 * Main usage in for app initialisation meaning to generate a first HR account
 * HR can generate and register all types of accounts
 */
@Controller
public class CreateHrController {
    @Autowired
    EmployeeCredentialsRepository employeeCredentialsRepository;
    @Autowired
    EmployeeRepository employeeRepository;
    @Autowired
    EmployeeCredentialsApiController employeeCredentialsApiController;
    @Autowired
    private AuthenticationManager authenticationManager;
    @Autowired
    private UserDetailsService userDetailsService;
    @Autowired
    private EmployeeService employeeService;
    @Autowired
    private SecurityService securityService;
    @Autowired
    private UserValidator userValidator;

    /**
     * GET method for creating an HR
     *
     * @param model Employee credentials
     * @return mapping for creting HR
     */
    @RequestMapping(value = "/createhr", method = RequestMethod.GET)
    public String createhr(Model model) {

        model.addAttribute("userForm", new EmployeeCredentials());

        return "/createhr";
    }

    /**
     * Adds a HR user generated by the ADMIN - intended for app initialisation in order to avoid hardcoding of a initial
     * user credentials in the DB.
     * Method generates a HR user with hardcoded user details that have to edited by an HR ROLE user
     * The user will appear in the list of employees pending for registration details completion
     * @param employeeCredentials employee credentials for HR user- model attribute
     * @param bindingResult  allows for  Validator to be applied, and adds binding-specific analysis and model building.
     * @param model the model
     * @return the mapping for the ADMIN user homepage
     */
    @RequestMapping(value = "/createhr", method = RequestMethod.POST)
    public String createhr(@ModelAttribute("employeeCredentials") EmployeeCredentials employeeCredentials, BindingResult bindingResult, Model model) {

        userValidator.validate(employeeCredentials, bindingResult);
        if (bindingResult.hasErrors()) {
            return "/createhr";
        }
        employeeCredentials.setJobId((long) 2);
        Random random = new Random();
        long employeeID = Math.abs(random.nextLong());
        while (employeeCredentialsRepository.findByEmployeeId(employeeID) != null) {
            employeeID = Math.abs(random.nextLong());
        }
        employeeCredentials.setEmployeeId(employeeID);
        employeeService.save(employeeCredentials);
        employeeCredentials = employeeCredentialsRepository.findByEmployeeId(employeeID);
        Employee employee = new Employee();
        employee.setFirstName("Superuser");
        employee.setLastName("HR");
        employee.setId(employeeCredentials.getId());
        employee.setJobId(employeeCredentials.getJobId());
        employee.setSalary((double) -1);
        employee.setExperience(-1);
        employee.setDaysOffCredits((long) -1);
        employee.setAddress("Proxima Centauri, No 1 Asteroid on the right");
        employee.setDepartmentId(0);
        employee.setEmploymentDate(Calendar.getInstance().getTime());
        employeeRepository.save(employee);
        return "redirect:/restricted/adminhomepage";
    }
}
